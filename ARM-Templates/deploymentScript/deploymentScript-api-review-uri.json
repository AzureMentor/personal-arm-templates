{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "msiToUseForSCript": {
            "type": "string"
        },
        "sqlConnectionString": {
            "type": "string"
        },
        "scriptSuffix": {
            "type": "string",
            "defaultValue": "[newGuid()]"
        },
        "scriptUri": {
            "type": "string"
        },
        "updateString": {
            "type": "string",
            "defaultValue": "[utcNow()]"
        }
    },
    "variables": {
        "scriptName": "[concat('createSqlData-', parameters('scriptSuffix'))]"
    },
    "resources": [
        {
            "type": "Microsoft.Resources/deploymentScripts",
            "apiVersion": "2019-10-01-preview",
            "name": "[variables('scriptName')]", // default value is newGuid() expression, so it will execute every time
            "location": "[resourceGroup().location]",
            "identity":{   
                "type":"UserAssigned", 
                "userAssignedIdentities": { 
                    "[parameters('msiToUseForScript')]": {} 
                } 
            },
            "kind": "AzurePowerShell", 
            "properties":
            {     
                "azPowerShellVersion": "1.7.0",
                "arguments": "-commandText 'sp_helpdb'", // can pass an arguement string, but can't use double-quotes or they must be escaped
                "primaryScriptUri": "[parameters('scriptUri')]", // must be a publicly accessible URI
                "forceUpdateTag": "[parameters('updateString')]", // can use this to trigger execution for otherwise duplicate PUTs
                // these are passed into the ACI instance as environment variables
                "environmentVariables": [
                    {
                        "name": "SqlConnectionString",
                        "secureValue": "[parameters('sqlConnectionString')]"
                    }
                ]
            }
        }
    ],
    "outputs": {
        "timeCompleted": {
            "type": "string",
            "value": "[reference('scriptName').outputs.timeCompleted]" // using the output of the script
        }
    }
}