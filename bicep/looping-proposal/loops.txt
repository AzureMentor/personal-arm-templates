SCENARIOS TO COVER:

1. Create a set of resources given a list or a count
2. Each resource in the set must be accessible to pull properties
  or emit outputs
3. Combine loops + conditions to filter out resources that would otherwise be created
4. Given a list or count, return an array for resource properties that 
  expect an array (e.g. subnets)
5. Needs to work with "quirks" of ARM template copy like batchSize
6. Syntax should work for nested child resources

// all examples assume the existence of a list of things to iterate over

var things = [
  {
    name: 'value'
    enabled: true
  }
  {
    name: 'second value'
    enabled: false
  }
]